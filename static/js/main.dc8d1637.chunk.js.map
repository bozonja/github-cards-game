{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","profile","this","props","className","src","avatar_url","style","width","alt","name","bio","React","Component","Cardlist","profiles","map","key","id","Form","state","userName","handleSubmit","event","a","preventDefault","axios","get","response","onSubmit","data","setState","placeholder","type","required","value","onChange","target","githubData","App","useState","profileData","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAiBeA,E,uKAbX,IAAMC,EAAUC,KAAKC,MACrB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAKJ,EAAQK,WAAYC,MAAO,CAACC,MAAO,SAAUC,IAAI,KACzD,yBAAKL,UAAU,QACb,4BAAKH,EAAQS,MACb,2BAAIT,EAAQU,W,GARLC,IAAMC,WCQVC,EAPE,SAACX,GAAD,OACf,6BACIA,EAAMY,SAASC,KAAI,SAAAf,GAAO,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CAAmBgB,IAAKhB,EAAQiB,W,yCCyBrDC,E,4MA1BbC,MAAQ,CAACC,SAAU,I,EACnBC,a,uCAAe,WAAOC,GAAP,eAAAC,EAAA,6DACbD,EAAME,iBADO,SAGbC,IAAMC,IAAN,uCAA0C,EAAKP,MAAMC,WAHxC,OAEPO,EAFO,OAIb,EAAKzB,MAAM0B,SAASD,EAASE,MAC7B,EAAKC,SAAS,CAACV,SAAU,KALZ,2C,6GAQL,IAAD,OACP,OACE,0BAAMQ,SAAU3B,KAAKoB,cACnB,2BACEU,YAAY,0BACZC,KAAK,OACLC,UAAQ,EACRC,MAAOjC,KAAKkB,MAAMC,SAClBe,SAAU,SAAAb,GAAK,OAAI,EAAKQ,SAAS,CAACV,SAAUE,EAAMc,OAAOF,WAG3D,4BAAQ/B,UAAU,QAAlB,Y,GArBWQ,IAAMC,WCGnByB,EAAa,GAqBJC,MAnBf,WAAgB,IAAD,EAEaC,mBAASF,GAFtB,mBAENlB,EAFM,KAECW,EAFD,KAQb,OACE,yBAAK3B,UAAU,OACb,wBAAIA,UAAU,gBAAd,mBACA,kBAAC,EAAD,CAAMyB,SAPY,SAACY,GACrBV,GAAU,SAAAW,GAAS,4BAAUA,GAAV,CAAqBD,UAOtC,kBAAC,EAAD,CAAU1B,SAAUK,MCRNuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc8d1637.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Card extends React.Component {\r\n  render() {\r\n    const profile = this.props;\r\n    return (\r\n      <div className=\"github-profile\">\r\n        <img src={profile.avatar_url} style={{width: '125px'}} alt=\"\"/>\r\n          <div className=\"info\">\r\n            <h3>{profile.name}</h3>\r\n            <p>{profile.bio}</p>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = (props) => (\r\n  <div>\r\n     {props.profiles.map(profile => <Card {...profile} key={profile.id}/>)}\r\n  </div>\r\n);\r\n\r\n\r\nexport default Cardlist;","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nclass Form extends React.Component {\r\n  state = {userName: ''};\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const response = await \r\n    axios.get(`https://api.github.com/users/${this.state.userName}`);\r\n    this.props.onSubmit(response.data);\r\n    this.setState({userName: ''})\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      <form onSubmit={this.handleSubmit}>\r\n        <input \r\n          placeholder=\"type github username...\" \r\n          type=\"text\" \r\n          required\r\n          value={this.state.userName}\r\n          onChange={event => this.setState({userName: event.target.value})}>\r\n\r\n        </input>\r\n        <button className=\"link\">Add</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './App.css';\r\nimport Cardlist from './components/Cardlist';\r\nimport Form from './components/Form';\r\n\r\nconst githubData = [];\r\n\r\nfunction App() {\r\n\r\n  const [state, setState] = useState(githubData);\r\n\r\n  const addNewProfile = (profileData) => {\r\n    setState( prevState => ( [...prevState, profileData] ));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"header-title\">Github profiles</h1>\r\n      <Form onSubmit={addNewProfile}/>\r\n      <Cardlist profiles={state}/>\r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}